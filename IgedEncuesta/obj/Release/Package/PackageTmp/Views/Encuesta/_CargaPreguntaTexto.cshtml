@model AdministracionInstrumentos.gic_PreguntaRespuestasFlujo

@{
    AdministracionInstrumentos.Encuesta objSesion = new AdministracionInstrumentos.Encuesta();
    string userIdApp;
    userIdApp = Request.Cookies["SesionIged"]["UserIdApp"].ToString();
    var departamentosJson = objSesion.getValorCampoSesion("LISTADEPARTAMENTOS", userIdApp);
    var municipiosJson = objSesion.getValorCampoSesion("LISTAMUNICIPIOS", userIdApp);

    var direccionesterritorialesJson = objSesion.getValorCampoSesion("LISTADT", userIdApp);
    var departamentosDTJson = objSesion.getValorCampoSesion("LISTADEPARTAMENTOSDT", userIdApp);
    var puntosatecionJson = objSesion.getValorCampoSesion("LISTAPA", userIdApp);
    var municipioJson = objSesion.getValorCampoSesion("LISTAMU", userIdApp);

    var listaDepartamentos = Newtonsoft.Json.JsonConvert.DeserializeObject<List<SelectListItem>>(departamentosJson);
    var listaMunicipios = Newtonsoft.Json.JsonConvert.DeserializeObject<List<SelectListItem>>(municipiosJson);

    var listaDireccionesTerritoriales = Newtonsoft.Json.JsonConvert.DeserializeObject<List<SelectListItem>>(direccionesterritorialesJson);
    var listadDepartamentosDT = Newtonsoft.Json.JsonConvert.DeserializeObject<List<SelectListItem>>(departamentosDTJson);
    var listaPuntosAtecion = Newtonsoft.Json.JsonConvert.DeserializeObject<List<SelectListItem>>(puntosatecionJson);
    var listaMunicipio = Newtonsoft.Json.JsonConvert.DeserializeObject<List<SelectListItem>>(puntosatecionJson);
    var OpcionRespuestaGen = Model.opcionesRespuesta.FirstOrDefault();
    string nombres = string.Empty;
    string valorCampoTexto = string.Empty;
    DateTime dtPregunta = new DateTime();

    AdministracionInstrumentos.gic_RespuestaNuevo resObj = new AdministracionInstrumentos.gic_RespuestaNuevo();
    bool cumpleValidacion = false;
    int idPersonaEncuestada = Model.idPersonaEncuesta;
    int edad = 0;
    string valorTexto = string.Empty;
    string departamento = string.Empty;
    string municipio = string.Empty;


    string departamentoDT = string.Empty;
    string direccionterritorial = string.Empty;
    string puntoatecion = string.Empty;

    AdministracionInstrumentos.gic_Pregunta preguntaT = new AdministracionInstrumentos.gic_Pregunta();
    System.Data.DataTable municipios = new System.Data.DataTable();
    System.Data.DataTable direccionesterritoriales = new System.Data.DataTable();

}
<style>
    .ui-autocomplete {
        max-height: 100px;
        width: 400px;
        overflow-y: auto;
        /* prevent horizontal scrollbar */
        overflow-x: hidden;
    }
    /* IE 6 doesn't support max-height
    * we use height instead, but this forces the menu to always be this tall
    */
    * html .ui-autocomplete {
        height: 100px;
    }
</style>

<div style="width: 100%">
    <input id="idPregunt" type="hidden" value="@Model.preguntaXpersonaGen.pre_IdPregunta" />
    <table style="width: 100%; border-collapse: separate; border-spacing: 10px;">

        @if (Model.preguntaXpersonaGen.pre_TipoCampo == "DP")
        {
            var pregunta = new System.Web.HtmlString(Model.preguntaXpersonaGen.pre_pregunta);

            if (Model.preguntaXpersonaGen.pre_TipoPregunta == "GE")
            {
                if (Model.respuestaPreguntaGen != null)
                {
                    if (Model.preguntaXpersonaGen.pre_IdPregunta == Model.respuestaPreguntaGen.res_IdRespuesta.pre_IdPregunta.pre_IdPregunta)
                    {
                        
                        municipio = Model.respuestaPreguntaGen.rxp_TextoRespuesta;
                        if (Model.respuestaPreguntaGen.rxp_TextoRespuesta.Count() == 4)
                        {
                            departamento = Model.respuestaPreguntaGen.rxp_TextoRespuesta.Substring(0, 1);
                        }
                        else
                        {
                            departamento = Model.respuestaPreguntaGen.rxp_TextoRespuesta.Substring(0, 2);
                        }
                        municipios = preguntaT.datosMunicipios(departamento);
                        listaMunicipios = preguntaT.CrearLista(municipios, 2);
                        
                    }
                }
                <tr>
                    <td style="border: 1px solid #ccc; border-radius: 5px; padding: 10px; background: white url('../Content/Imagenes/pattern-4i7c.png') repeat">
                        @Html.Label("", "Pregunta " + Model.preguntaXpersonaGen.ipx_Orden.ToString() + ". ", new { style = "text-transform:uppercase;;font-family:'Roboto'; font-size: 12px;" })
                        @Html.Raw("<label style=\"text-transform:uppercase;font-family:'Roboto'; font-size: 12px;\">")
                        @Html.Raw(pregunta.ToString())
                        @Html.Raw("</label>")
                    </td>
                </tr>
                <tr>
                    <td style="width:100%" class=" marcoPreguntas efecto2 efecto1">
                        <table>
                            <tr>
                                <td style="width: 30%;">
                                    @Html.Label("Departamento", new { @style = "text-transform:uppercase; font-family:'Roboto'; font-size:12px; font-weight:normal; width:210px;text-align:center;" })

                                </td>
                                <td style="width: 70%;">
                                    @Html.DropDownList("D_" + Model.preguntaXpersonaGen.pre_IdPregunta.ToString(), listaDepartamentos.Select(u => new SelectListItem
                               {
                                   Text = u.Text,
                                   Value = u.Value,
                                   Selected = u.Value == departamento
                               }), new { required = "required", style = "", @class = "dropDownList requerido drop", id = "D_" + Model.preguntaXpersonaGen.pre_IdPregunta.ToString() })
                                </td>
                            </tr>
                            <tr>
                                <td style="width: 30%;">
                                    @Html.Label("Municipio", new { @style = "text-transform:uppercase;font-family:'Roboto'; font-size:12px; font-weight:normal; width:210px;text-align:center;" })
                                </td>
                                <td style="width: 70%;">
                                    @Html.DropDownList("M_" + Model.preguntaXpersonaGen.pre_IdPregunta.ToString(), listaMunicipios.Select(y => new SelectListItem
                               {
                                   Text = y.Text,
                                   Value = y.Value,
                                   Selected = y.Value == municipio
                               }), new { disabled = "", required = "required", style = "", @class = "dropDownList requerido ", id = "M_" + Model.preguntaXpersonaGen.pre_IdPregunta.ToString() })
                                </td>
                            </tr>
                        </table>
                    </td>
                    
                </tr>
            }
        }

        else if (Model.preguntaXpersonaGen.pre_TipoCampo == "DT")
        {
            var pregunta = new System.Web.HtmlString(Model.preguntaXpersonaGen.pre_pregunta);


            if (Model.preguntaXpersonaGen.pre_TipoPregunta == "GE")
            {
                if (Model.respuestaPreguntaGen != null)
                {
                    if (Model.preguntaXpersonaGen.pre_IdPregunta == Model.respuestaPreguntaGen.res_IdRespuesta.pre_IdPregunta.pre_IdPregunta)
                    {

                        direccionterritorial = Model.respuestaPreguntaGen.rxp_TextoRespuesta;
                        if (direccionterritorial != null)
                        {
                            if (Model.respuestaPreguntaGen.rxp_TextoRespuesta.Count() == 4)
                            {
                                departamentoDT = Model.respuestaPreguntaGen.rxp_TextoRespuesta.Substring(0, 1);
                            }
                            else
                            {
                                try {//quitar este try 02/03/2020
                                    departamentoDT = Model.respuestaPreguntaGen.rxp_TextoRespuesta.Substring(0, 2);
                                } catch (Exception e) {
                                }

                            }
                        }
                        else {
                            departamentoDT = "0";
                        }


                        direccionesterritoriales = preguntaT.datosDireccionTerritorial(departamentoDT);
                        listaDireccionesTerritoriales = preguntaT.CrearLista(direccionesterritoriales, 2);

                    }
                }
                <tr>
                    <td style="border: 1px solid #ccc; border-radius: 5px; padding: 10px; background: white url('../Content/Imagenes/pattern-4i7c.png') repeat">
                        @Html.Label("", "Pregunta " + Model.preguntaXpersonaGen.ipx_Orden.ToString() + ". ", new { style = "text-transform:uppercase;;font-family:'Roboto'; font-size: 12px;" })
                        @Html.Raw("<label style=\"text-transform:uppercase;font-family:'Roboto'; font-size: 12px;\">")
                        @Html.Raw(pregunta.ToString())
                        @Html.Raw("</label>")
                    </td>
                </tr>
                <tr>
                    <td style="width:100%" class=" marcoPreguntas efecto2 efecto1">
                        <table>
                            <tr>
                                <td style="width: 30%;">
                                    @Html.Label("Dirección territorial", new { @style = "text-transform:uppercase;font-family:'Roboto'; font-size:12px; font-weight:normal; width:210px;text-align:center;" })
                                </td>
                                <td style="width: 70%;">
                                    @Html.DropDownList("DI_" + Model.preguntaXpersonaGen.pre_IdPregunta.ToString(), listaDireccionesTerritoriales.Select(y => new SelectListItem
                               {
                                   Text = y.Text,
                                   Value = y.Value,
                                   Selected = y.Value == direccionterritorial
                               }), new {  required = "required", style = "", @class = "dropDownList requerido dropdepartamento", id = "DI_" + Model.preguntaXpersonaGen.pre_IdPregunta.ToString() })
                                </td>
                            </tr>
                            <tr>
                                <td style="width: 30%;">
                                    @Html.Label("Departamento", new { @style = "text-transform:uppercase; font-family:'Roboto'; font-size:12px; font-weight:normal; width:210px;text-align:center;" })

                                </td>
                                <td style="width: 70%;">
                                    @Html.DropDownList("DE_" + Model.preguntaXpersonaGen.pre_IdPregunta.ToString(), listadDepartamentosDT.Select(u => new SelectListItem
                               {
                                   Text = u.Text,
                                   Value = u.Value,
                                   Selected = u.Value == departamentoDT
                               }), new { disabled = "", required = "required", style = "", @class = "dropDownList requerido droppuntoatencion", id = "DE_" + Model.preguntaXpersonaGen.pre_IdPregunta.ToString() })
                                </td>
                            </tr>                            
                            <tr>
                                <td style="width: 30%;">
                                    @Html.Label("Punto Atención", new { @style = "text-transform:uppercase;font-family:'Roboto'; font-size:12px; font-weight:normal; width:210px;text-align:center;" })
                                </td>
                                <td style="width: 70%;">
                                    @Html.DropDownList("PA_" + Model.preguntaXpersonaGen.pre_IdPregunta.ToString(), listaPuntosAtecion.Select(y => new SelectListItem
                               {
                                   Text = y.Text,
                                   Value = y.Value,
                                   Selected = y.Value == puntoatecion
                               }), new { disabled = "", required = "required", style = "", @class = "dropDownList requerido dropmunicipio", id = "PA_" + Model.preguntaXpersonaGen.pre_IdPregunta.ToString() })
                                </td>
                            </tr>
                            <tr>
                                <td style="width: 30%;">
                                    @Html.Label("Municipio", new { @style = "text-transform:uppercase;font-family:'Roboto'; font-size:12px; font-weight:normal; width:210px;text-align:center;" })
                                </td>
                                <td style="width: 70%;">
                                    @Html.DropDownList("MU_" + Model.preguntaXpersonaGen.pre_IdPregunta.ToString(), listaMunicipio.Select(y => new SelectListItem
                               {
                                   Text = y.Text,
                                   Value = y.Value,
                                   Selected = y.Value == puntoatecion
                               }), new { disabled = "", required = "required", style = "", @class = "dropDownList requerido guardaultimodatoseleccionado", id = "MU_" + Model.preguntaXpersonaGen.pre_IdPregunta.ToString() })
                                </td>
                            </tr>
                        </table>
                    </td>

                </tr>
            }
        }

        else if (Model.preguntaXpersonaGen.pre_TipoCampo == "TE" || Model.preguntaXpersonaGen.pre_TipoCampo == "TA" || Model.preguntaXpersonaGen.pre_TipoCampo == "AT" )
        {

            var pregunta = new System.Web.HtmlString(Model.preguntaXpersonaGen.pre_pregunta);

            if (Model.preguntaXpersonaGen.pre_TipoPregunta == "GE")
            {


                <tr>
                    <td style="border: 1px solid #ccc; border-radius: 5px; padding: 10px; background: white url('../Content/Imagenes/pattern-4i7c.png') repeat">
                        @Html.Label("", "Pregunta " + Model.preguntaXpersonaGen.ipx_Orden.ToString() + ". ", new { style = "text-transform:uppercase;;font-family:'Roboto'; font-size: 12px;" })
                        @Html.Raw("<label style=\"text-transform:uppercase;font-family:'Roboto'; font-size: 12px;\">")
                        @Html.Raw(pregunta.ToString())
                        @Html.Raw("</label>")
                    </td>
                </tr>
                <tr style="text-align: left;">
                    <td class=" marcoPreguntas efecto2 efecto1" style="width: 100%">

                        @if (Model.preguntaXpersonaGen.pre_TipoCampo == "TE" || Model.preguntaXpersonaGen.pre_TipoCampo == "TA" || Model.preguntaXpersonaGen.pre_TipoCampo == "AT" )
                        {

                            if (Model.respuestaPreguntaGen != null)
                            {
                                if (Model.preguntaXpersonaGen.pre_IdPregunta == Model.respuestaPreguntaGen.res_IdRespuesta.pre_IdPregunta.pre_IdPregunta)
                                {
                                    
                                    valorTexto = Model.respuestaPreguntaGen.rxp_TextoRespuesta;

                                }
                            }

                            @GenerarValidador(OpcionRespuestaGen, "txt_" + OpcionRespuestaGen.res_IdRespuesta.ToString(), idPersonaEncuestada, valorTexto, true, false, dtPregunta)
                        }
                        else
                        {


                            @GenerarValidador(OpcionRespuestaGen, "txt_" + OpcionRespuestaGen.res_IdRespuesta.ToString(), idPersonaEncuestada, "", true, true, dtPregunta)
                        }
                    </td>
                </tr>

            }
            else if (Model.preguntaXpersonaGen.pre_TipoPregunta == "IN")
            {
                <tr>
                    <td colspan="2" style="border: 1px solid #ccc; border-radius: 5px; padding: 10px; background: white url('../Content/Imagenes/pattern-4i7c.png') repeat">
                        @Html.Label("", "Pregunta " + Model.preguntaXpersonaGen.ipx_Orden.ToString() + ". ", new { style = "text-transform:uppercase;;font-family:'Roboto'; font-size: 12px;" })
                        @Html.Raw("<label style=\"text-transform:uppercase;font-family:'Roboto'; font-size: 12px;\">")
                        @Html.Raw(pregunta.ToString())
                        @Html.Raw("</label>")
                    </td>
                </tr>

                foreach (AdministracionInstrumentos.gic_PreguntasxPersona personas in Model.colleccionPreguntas)
                {

                    nombres = personas.per_PrimerNombre + " " + personas.per_SegundoNombre + " " + personas.per_PrimerApellido + " " + personas.per_SegundoApellido;
                    string tabla = "tbl_" + Model.preguntaXpersonaGen.pre_IdPregunta + "_per_" + personas.per_IdPersona;
                    AdministracionInstrumentos.gic_Hogar objHogar = new AdministracionInstrumentos.gic_Hogar();
                    var validaNombre = int.Parse(objHogar.get_idpersonaXTipoPersona(personas.per_IdPersona.ToString(), personas.cod_Hogar));
                    var clase = "marcoPreguntas efecto2 efecto1";
                    if (validaNombre > 0)
                    {
                        clase = "marcoPreguntasJefeHogar";
                    }
                    <tr>
                        <td style="width: 40%;" class="@clase">
                            @Html.Label(nombres, new { @style = "text-transform:uppercase; font-family:'Roboto'; font-size:12px; font-weight:normal; width:210px;text-align:center;" })

                        </td>
                        <td style="width: 60%" class=" marcoPreguntas efecto2 efecto1">
                            <table id="@tabla">
                                @foreach (AdministracionInstrumentos.gic_RespuestaNuevo respuesta in Model.opcionesRespuesta.OrderBy(x => x.res_IdRespuesta))
                                {
                                    valorCampoTexto = "";

                                    switch (respuesta.res_Respuesta)
                                    {
                                        case "Primer Nombre":
                                            if (personas.per_PrimerNombre == "&nbsp;" || string.IsNullOrEmpty(personas.per_PrimerNombre))
                                            {
                                                valorCampoTexto = string.Empty;
                                            }
                                            else
                                            {
                                                valorCampoTexto = HttpUtility.HtmlDecode(personas.per_PrimerNombre.Trim());
                                            }
                                            break;
                                        case "Segundo Nombre":
                                            if (personas.per_SegundoNombre == "&nbsp;" || string.IsNullOrEmpty(personas.per_SegundoNombre))
                                            {
                                                valorCampoTexto = string.Empty;

                                            }
                                            else
                                            {
                                                valorCampoTexto = HttpUtility.HtmlDecode(personas.per_SegundoNombre.Trim());

                                            }
                                            break;
                                        case "Primer Apellido":
                                            if (personas.per_PrimerApellido == "&nbsp;" || string.IsNullOrEmpty(personas.per_PrimerApellido))
                                            {
                                                valorCampoTexto = string.Empty;

                                            }
                                            else
                                            {
                                                valorCampoTexto = HttpUtility.HtmlDecode(personas.per_PrimerApellido.Trim());

                                            }
                                            break;
                                        case "Segundo Apellido":
                                            if (personas.per_SegundoApellido == "&nbsp;" || string.IsNullOrEmpty(personas.per_SegundoApellido))
                                            {
                                                valorCampoTexto = string.Empty;

                                            }
                                            else
                                            {
                                                valorCampoTexto = HttpUtility.HtmlDecode(personas.per_SegundoApellido.Trim());
                                            }


                                            break;

                                    }
                                    if (Model.preguntaXpersonaGen.pre_IdPregunta == 27)
                                    {
                                        
                                        if (personas.per_fechaNacimiento == null || string.IsNullOrEmpty(personas.per_fechaNacimiento.ToShortDateString()))
                                        {
                                            
                                            valorCampoTexto = string.Empty;
                                        }
                                        else
                                        {
                                            
                                            valorCampoTexto = personas.per_fechaNacimiento.ToShortDateString();
                                            dtPregunta = personas.per_fechaNacimiento;
                                        }
                                    }

                                    if (Model.preguntaXpersonaGen.pre_IdPregunta == 31)
                                    {
                                        if (personas.per_NumeroDoc == "&nbsp;" || string.IsNullOrEmpty(personas.per_NumeroDoc))
                                        {
                                            valorCampoTexto = string.Empty;
                                        }
                                        else
                                        {
                                            valorCampoTexto = personas.per_NumeroDoc.Trim();
                                        }
                                    }

                                    if (Model.preguntaXpersonaGen.pre_IdPregunta == 11)
                                    {
                                        
                                        if (personas.per_fechaNacimiento == null || string.IsNullOrEmpty(personas.per_fechaNacimiento.ToShortDateString()))
                                        {
                                            
                                            valorCampoTexto = string.Empty;
                                        }
                                        else
                                        {
                                            
                                            valorCampoTexto = personas.per_fechaNacimiento.ToShortDateString();
                                            dtPregunta = personas.per_fechaNacimiento;
                                        }
                                    }

                                    if (personas.validacion_Persona == 0)
                                    {
                                        cumpleValidacion = false;
                                    }
                                    else
                                    {
                                        cumpleValidacion = true;
                                    }
                                    if (respuesta.res_IdRespuesta == 23)
                                    {
                                        edad = resObj.get_Edadxpersona(personas.per_IdPersona, Model.codigoHogar);
                                        if (edad != 0)
                                        {
                                            valorCampoTexto = edad.ToString();
                                        }
                                        if (edad == 0)
                                        {
                                            valorCampoTexto = edad.ToString();
                                        }
                                    }

                                    foreach (AdministracionInstrumentos.gic_RespuestaxEncuesta resEn in Model.coleccionRespuestas.OrderBy(x => x.res_IdRespuesta.pre_IdPregunta.pre_IdPregunta).ToList())
                                    {

                                        if (resEn.res_IdRespuesta.pre_IdPregunta.pre_IdPregunta == personas.pre_IdPregunta && resEn.res_IdRespuesta.res_IdRespuesta == respuesta.res_IdRespuesta)
                                        {
                                            if (resEn.per_IdPersona == personas.per_IdPersona)
                                            {
                                                
                                                if (resEn.res_IdRespuesta.res_IdRespuesta != 23)
                                                {
                                                    valorCampoTexto = HttpUtility.HtmlDecode(resEn.rxp_TextoRespuesta);
                                                }
                                            }

                                        }

                                    }
                                    bool autoCompletarVal = false;
                                    if (Model.preguntaXpersonaGen.pre_TipoCampo == "AT")
                                    {
                                        autoCompletarVal = true;
                                    }
                                    <tr>
                                        <td>
                                            @if (respuesta.res_Respuesta != null)
                                            {
                                                Html.Label(respuesta.res_Respuesta);
                                            }
                                        </td>
                                        <td>

                                            @GenerarValidador(respuesta, "txt_" + respuesta.res_IdRespuesta + "_per_" + personas.per_IdPersona.ToString(), personas.per_IdPersona, valorCampoTexto, cumpleValidacion, autoCompletarVal, dtPregunta)
                                        </td>
                                    </tr>

                                }
                            </table>
                        </td>
                    </tr>
                }

            }

        }

    </table>

</div>
@helper GenerarValidador(AdministracionInstrumentos.gic_RespuestaNuevo respuesta, string idControl, int idPersona, string valorTexto, bool validarControl, bool autocompletar, DateTime dtPregunta)
{
string respuestaRequerida = string.Empty;
int longCampo = 10;
int edad;
int totalcuartosxfamilia = 0;
int int_width = 300;
int miembrosHogar;
string eventoOnchange = string.Empty;
string eventoOnkey = string.Empty;
string claseAutocompletar = string.Empty;
AdministracionInstrumentos.gic_RespuestaNuevo resObj = new AdministracionInstrumentos.gic_RespuestaNuevo();
AdministracionInstrumentos.gic_Hogar hogObj = new AdministracionInstrumentos.gic_Hogar();
string visibilidadControl = "visible";
string width = "width:";

string heigth = string.Empty;
// string classify = (input > 0) ? "positive" : "negative";
respuestaRequerida = (respuesta.res_Obligatoria == "SI") ? "required" : "";
DateTime MyDateTime;
MyDateTime = new DateTime();
string valorMinimo = (respuesta.pre_Validador_Min != null) ? respuesta.pre_Validador_Min : "1";
string valorMaximo = (respuesta.pre_Validador_Max != null) ? respuesta.pre_Validador_Max : "10";
string pattern = "yy-MM-dd";
if (respuesta.pre_Validador == "FE")
{

    if (valorTexto == "")
    {
        valorTexto = DateTime.Now.ToString("yyyy-MM-dd");
    }
    else
    {
        DateTime parsedDate = DateTime.Parse(valorTexto);
        string fechaN = parsedDate.ToString("yyyy-MM-dd");
        valorTexto = fechaN;

    }

}




//Valida que no vega vacio el campo de logitud
if (!string.IsNullOrEmpty(respuesta.pre_longcampo.ToString()) && respuesta.pre_longcampo > 0)
{
    longCampo = respuesta.pre_longcampo;
    eventoOnkey = "validarOnkey(this, " + longCampo + ");";
}

//MODIFICACION: JOSE VASQUEZ  NOV.19.2015
//SE CONTROLA LA LONGITUD DEL CONTROL TEXTO, VA LA
//LONGITUD DE ACUERDO A LA CANTIDAD DE CARACTERES
//if (longCampo > 0 && autocompletar == false)
//{
//    int_width = (longCampo * 24);
//    if (int_width > 550)
//    {
//        int_width = 550;
//        }
//}else if(autocompletar==true){
//    int_width = 450;
//}


width += int_width.ToString() + "px;";
//FIN MODIFICACION: JOSE VASQUEZ  NOV.19.2015

//Si el validador_Max viene con SYSDATE, coloca la fecha actual.
if (respuesta.pre_Validador_Max == "SYSDATE")
{
    //respuesta.pre_Validador_Max = DateTime.Now.ToShortDateString();
    //IgedEncuesta.Models.mdlGenerico.Tool.EscribeLog("from _CargarPreguntaTexto ....GenerarValidador  ", " valorMaximo ");
    valorMaximo = DateTime.Now.ToString("yyyy-MM-dd");
    // IgedEncuesta.Models.mdlGenerico.Tool.EscribeLog("from _CargarPreguntaTexto ....GenerarValidador  ", " valorMaximo : " + valorMaximo);
}
//Para validar cantidad de miembors del hogar
if (respuesta.res_IdRespuesta.ToString() == "23")
{

    edad = resObj.get_Edadxpersona(idPersona, Model.codigoHogar);
    eventoOnchange = "validarEdadPersona('" + edad.ToString() + "',this)";
}

if (respuesta.res_IdRespuesta.ToString() == "159")
{

    totalcuartosxfamilia = resObj.FN_GET_TOTALCUARTOSXFAMILIA(idPersona, Model.codigoHogar);
    eventoOnchange = "validarTotalCuartos('" + totalcuartosxfamilia.ToString() + "',this)";
}

if (respuesta.res_IdRespuesta.ToString() == "26")
{

    edad = resObj.get_Edadxpersona(idPersona, Model.codigoHogar);
    eventoOnchange = "validarAñosEstadia('" + edad.ToString() + "',this)";
}
if (respuesta.res_IdRespuesta.ToString() == "160")
{

    miembrosHogar = hogObj.validaMiembrosCodigo(Model.codigoHogar);
    eventoOnchange = "validarMiembrosHogar('" + miembrosHogar.ToString() + "',this)";
}

if (respuesta.res_IdRespuesta.ToString() == "101")
{

    // miembrosHogar = hogObj.validaMiembrosCodigo(Session["CODHOGAR"].ToString());
    eventoOnchange = "confirmacionCambioCedula('" + valorTexto + "',this)";
}
/*
if (respuesta.res_IdRespuesta.ToString() == "78")
{

    eventoOnchange = "confirmacionFechaNacimiento('" + valorTexto + "',this)";
}*/
/*else if (respuesta.res_IdRespuesta.ToString() == "26")
{
    eventoOnchange = "validarDocumentoPersona('" + edad.ToString() + "',this)";
}*/

//Valida si esa pregunta cumple los validadores para mosntrar o no el campo de texto.
if (validarControl == false)
{
    visibilidadControl = "hidden";
    respuestaRequerida = "";
}

//Valida si el campo0 de texto realiza operacionde autocompletar.
claseAutocompletar = (autocompletar == true) ? "autocompletar" : "";
//if (autocompletar == true)
//{
//    claseAutocompletar = "autocompletar";
//}

if (Model.preguntaXpersonaGen.pre_TipoCampo == "TA")
{
    respuestaRequerida = "required";
    heigth = "height:80px";
    respuestaRequerida = "";
    width = "width:550px;";
}
else
{
    heigth = "height:30px";
}
if (validarControl == true)
{
        <div>
            

            @if (respuesta.pre_Validador == "TE")
            {

                string tipopersona = respuesta.obtenerTipoPersona(Model.codigoHogar, idPersona);
                string idRespuesta = respuesta.res_IdRespuesta.ToString();

                if (idRespuesta.Equals("101") )
                {
                    if (tipopersona.Equals("SI"))
                    {
                        if (respuestaRequerida == "required")
                        {
                            @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + "; " + width + " " + heigth + " ", pattern = @"^[A-Z0-9 a-z # \- , . ñÑáéíóú]*$", min = valorMinimo, max = valorMaximo, required = "", maxlength = longCampo, id = idControl, @class = "    " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", disabled = "disabled", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })
                            //@*oninvalid="setCustomValidity('Probando para cambiar mensaje de xxxx')"*@@* oninput="setCustomValidity('validando')"*@
                        }
                        else
                        {

                            @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + "; " + width + " " + heigth + " ", pattern = @"^[A-Z0-9 a-z # \- , . ñÑáéíóú]*$", min = valorMinimo, max = valorMaximo, respuestaRequerida, maxlength = longCampo, id = idControl, @class = " entrada " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", disabled = "disabled", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })


                        }
                    }
                    else
                    {
                        if (respuestaRequerida == "required")
                        {
                            @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + "; " + width + " " + heigth + " ", pattern = @"^[A-Z0-9 a-z # \- , . ñÑáéíóú]*$", min = valorMinimo, max = valorMaximo, required = "", maxlength = longCampo, id = idControl, @class = "    " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })
                            //@*oninvalid="setCustomValidity('Probando para cambiar mensaje de xxxx')"*@@* oninput="setCustomValidity('validando')"*@
                        }
                        else
                        {

                            @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + "; " + width + " " + heigth + " ", pattern = @"^[A-Z0-9 a-z # \- , . ñÑáéíóú]*$", min = valorMinimo, max = valorMaximo, respuestaRequerida, maxlength = longCampo, id = idControl, @class = " entrada " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })


                        }
                    }
                }

                else
                {
                    if (respuestaRequerida == "required")
                    {
                        @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + "; " + width + " " + heigth + " ", pattern = @"^[A-Z0-9 a-z # \- , . ñÑáéíóú]*$", min = valorMinimo, max = valorMaximo, required = "", maxlength = longCampo, id = idControl, @class = "    " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })
                        //@*oninvalid="setCustomValidity('Probando para cambiar mensaje de xxxx')"*@@* oninput="setCustomValidity('validando')"*@
                    }
                    else
                    {

                        @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + "; " + width + " " + heigth + " ", pattern = @"^[A-Z0-9 a-z # \- , . ñÑáéíóú]*$", min = valorMinimo, max = valorMaximo, respuestaRequerida, maxlength = longCampo, id = idControl, @class = " entrada " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })


                    }
                }

            }
            //andrés quintero 23/01/2020
            else if (respuesta.pre_Validador == "TESN")
            {
                string tipopersona = respuesta.obtenerTipoPersona(Model.codigoHogar, idPersona);
                string idRespuesta = respuesta.res_IdRespuesta.ToString();

                if (idRespuesta.Equals("19") || idRespuesta.Equals("20") || idRespuesta.Equals("21") || idRespuesta.Equals("22"))
                {
                    if (tipopersona.Equals("SI"))
                    {
                        if (respuestaRequerida == "required")
                        {

                            @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + "; " + width + " " + heigth + " ", pattern = @"^[A-Z a-z # \- , . ñÑáéíóú]*$", min = valorMinimo, max = valorMaximo, required = "", maxlength = longCampo, id = idControl, @class = "    " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", disabled = "disabled", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })
                            
                        }
                        else
                        {
                            @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + "; " + width + " " + heigth + " ", pattern = @"^[A-Z a-z # \- , . ñÑáéíóú]*$", min = valorMinimo, max = valorMaximo, respuestaRequerida, maxlength = longCampo, id = idControl, @class = " entrada " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", disabled = "disabled", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })

                        }
                    }
                    else
                    {
                        if (respuestaRequerida == "required")
                        {

                            @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + "; " + width + " " + heigth + " ", pattern = @"^[A-Z a-z # \- , . ñÑáéíóú]*$", min = valorMinimo, max = valorMaximo, required = "", maxlength = longCampo, id = idControl, @class = "    " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })
                            
                        }
                        else
                        {
                            @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + "; " + width + " " + heigth + " ", pattern = @"^[A-Z a-z # \- , . ñÑáéíóú]*$", min = valorMinimo, max = valorMaximo, respuestaRequerida, maxlength = longCampo, id = idControl, @class = " entrada " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })

                        }
                    }
                }
                else
                {
                    if (respuestaRequerida == "required")
                    {

                        @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + "; " + width + " " + heigth + " ", pattern = @"^[A-Z a-z # \- , . ñÑáéíóú]*$", min = valorMinimo, max = valorMaximo, required = "", maxlength = longCampo, id = idControl, @class = "    " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })
                        
                    }
                    else
                    {
                        @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + "; " + width + " " + heigth + " ", pattern = @"^[A-Z a-z # \- , . ñÑáéíóú]*$", min = valorMinimo, max = valorMaximo, respuestaRequerida, maxlength = longCampo, id = idControl, @class = " entrada " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })

                    }
                }


            }
            //
            else if (respuesta.pre_Validador == "NU")
            {
                string tipopersona = respuesta.obtenerTipoPersona(Model.codigoHogar, idPersona);
                string idRespuesta = respuesta.res_IdRespuesta.ToString();

                if (idRespuesta.Equals("101"))
                {
                    if (tipopersona.Equals("SI"))
                    {
                        if (respuestaRequerida == "required")
                        {
                            @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + " ; " + width + " ", pattern = "[0-9]*", min = valorMinimo, max = valorMaximo, required = "", maxlength = longCampo, id = idControl, @class = "requerido entrada", @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", disabled = "disabled", type = "number" })
                        }
                        else
                        {
                            @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + " ; " + width + " ", pattern = "[0-9]*", min = valorMinimo, max = valorMaximo, maxlength = longCampo, id = idControl, @class = "requerido entrada", @onkeypress = eventoOnkey, @onchange = eventoOnchange, type = "number", oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", disabled = "disabled", })
                        }
                    }
                    else
                    {
                        if (respuestaRequerida == "required")
                        {
                            @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + " ; " + width + " ", pattern = "[0-9]*", min = valorMinimo, max = valorMaximo, required = "", maxlength = longCampo, id = idControl, @class = "requerido entrada", @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", type = "number" })
                        }
                        else
                        {
                            @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + " ; " + width + " ", pattern = "[0-9]*", min = valorMinimo, max = valorMaximo, maxlength = longCampo, id = idControl, @class = "requerido entrada", @onkeypress = eventoOnkey, @onchange = eventoOnchange, type = "number", oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", })
                        }
                    }
                }
                else
                {
                    if (respuestaRequerida == "required")
                    {
                        @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + " ; " + width + " ", pattern = "[0-9]*", min = valorMinimo, max = valorMaximo, required = "", maxlength = longCampo, id = idControl, @class = "requerido entrada", @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", type = "number" })
                    }
                    else
                    {
                        @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + " ; " + width + " ", pattern = "[0-9]*", min = valorMinimo, max = valorMaximo, maxlength = longCampo, id = idControl, @class = "requerido entrada", @onkeypress = eventoOnkey, @onchange = eventoOnchange, type = "number", oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", })
                    }
                }


            }
            else if (respuesta.pre_Validador == "FE")
            {

                string tipopersona = respuesta.obtenerTipoPersona(Model.codigoHogar, idPersona);
                string idRespuesta = respuesta.res_IdRespuesta.ToString();

                if (tipopersona.Equals("SI") && idRespuesta.Equals("78"))
                {

                    if (respuestaRequerida == "required")
                    {
                        @Html.TextBox(idControl, valorTexto, "{0:yyyy-MM-dd}", new { @style = "visibility:" + visibilidadControl + "; " + width + " ", type = "date", pattern = @"^[\d{1,2}/\d{1,2}/\d{4}\s]*$", min = valorMinimo, max = valorMaximo, required = "", maxlength = longCampo, id = idControl, @class = "requerido entrada " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", disabled = "disabled", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })
                    }
                    else
                    {
                        @Html.TextBox(idControl, valorTexto, "{0:yyyy-MM-dd}", new { required = "", @style = "visibility:" + visibilidadControl + "; " + width + " ", type = "date", pattern = @"^[\d{1,2}/\d{1,2}/\d{4}\s]*$", min = valorMinimo, max = valorMaximo, maxlength = longCampo, id = idControl, @class = "requerido entrada " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", disabled = "disabled", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })
                    }
                }
                else
                {
                    //  IgedEncuesta.Models.mdlGenerico.Tool.EscribeLog("from _CargarPreguntaTexto ....respuesta.pre_Validador == FE  ", " MyDateTime : " + MyDateTime.ToString() + ", valorMinimo: " + valorMinimo + ", valorMaximo: " + valorMaximo);
                    if (respuestaRequerida == "required")
                    {
                        @Html.TextBox(idControl, valorTexto, "{0:yyyy-MM-dd}", new { @style = "visibility:" + visibilidadControl + "; " + width + " ", type = "date", pattern = @"^[\d{1,2}/\d{1,2}/\d{4}\s]*$", min = valorMinimo, max = valorMaximo, required = "", maxlength = longCampo, id = idControl, @class = "requerido entrada " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })
                    }
                    else
                    {
                        @*@Html.TextBox(idControl, valorTexto, "{0:yyyy-MM-dd}", new { required = "", @style = "visibility:" + visibilidadControl + "; " + width + " ", type = "date", pattern = @"^[\d{1,2}/\d{1,2}/\d{4}\s]*$", min = valorMinimo, max = valorMaximo, maxlength = longCampo, id = idControl, @class = "requerido entrada " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })*@
                        @Html.TextBox(idControl, valorTexto, "{0:yyyy-MM-dd}", new { required = "", @style = "visibility:" + visibilidadControl + "; " + width + " ", type = "date", pattern = @"^[\d{1,2}/\d{1,2}/\d{4}\s]*$", min = valorMinimo, max = valorMaximo, maxlength = longCampo, id = idControl, @class = "requerido entrada " + claseAutocompletar, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })

                    }
                }





            }
            else if (respuesta.pre_Validador == "DI")
            {
                if (respuestaRequerida == "required")
                {
                    @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + "; " + width + " ", pattern = @"^[A-Z0-9 a-z # \-  áéíóú]*$", min = valorMinimo, max = valorMaximo, required = "", maxlength = respuesta.pre_longcampo, id = idControl, @class = "requerido entrada " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })
                }
                else
                {
                    @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + "; " + width + " ", pattern = @"^[A-Z0-9 a-z # \-  áéíóú]*$", min = valorMinimo, max = valorMaximo, maxlength = respuesta.pre_longcampo, id = idControl, @class = "requerido entrada " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })
                }
            }
            else if (respuesta.pre_Validador == "EM")
            {
                if (respuestaRequerida == "required")
                {
                    @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + "; " + width + " ", pattern = @"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$", min = valorMinimo, max = valorMaximo, required = "", maxlength = longCampo, id = idControl, @class = "requerido entrada " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })
                }
                else
                {
                    @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + "; " + width + " ", pattern = @"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$", min = valorMinimo, max = valorMaximo, maxlength = longCampo, id = idControl, @class = "requerido entrada " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })
                }
            }
            else if (respuesta.pre_Validador == "TI")
            {
                if (respuestaRequerida == "required")
                {
                    @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + "; " + width + " ", pattern = @"\d{2}-\d{7}", min = valorMinimo, max = valorMaximo, required = "", maxlength = longCampo, id = idControl, @class = "requerido entrada " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })
                }
                else
                {
                    @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + "; " + width + " ", pattern = @"\d{2}-\d{7}", min = valorMinimo, max = valorMaximo, maxlength = longCampo, id = idControl, @class = "requerido entrada " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })
                }
            }
            else
            {
                if (respuestaRequerida == "required")
                {
                    @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + "; " + width + " " + heigth + " ", pattern = @"^[A-Z0-9 a-z # \- , . ñÑáéíóú]*$", type = "text", min = valorMinimo, max = valorMaximo, maxlength = longCampo, required = "", id = idControl, @class = " entrada " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this,'" + respuesta.pre_Validador + "');", oninput = "InvalidMsg(this,'" + respuesta.pre_Validador + "');" })
                }
                else
                {
                    @Html.TextBox(idControl, valorTexto, new { @style = "visibility:" + visibilidadControl + "; " + width + " " + heigth + " ", pattern = @"^[A-Z0-9 a-z # \- , . ñÑáéíóú]*$", min = valorMinimo, max = respuesta.pre_Validador_Max, maxlength = longCampo, id = idControl, @class = " entrada " + claseAutocompletar, @onkeypress = eventoOnkey, @onchange = eventoOnchange, oninvalid = "InvalidMsg(this," + respuesta.pre_Validador + " );", oninput = "InvalidMsg(this," + respuesta.pre_Validador + ");" })
                }

            }

        </div>
}
}

<script type="text/javascript">

    window.confirm = function (message) {
        $(document.createElement('div'))
            .attr({ 'class': 'dialog' })
            .html(message)
    };

    function validarEdadPersona(edad, objeto) {
        if ($(objeto).val() > edad) {
            alert("El valor registrado no debe ser mayor a " + edad + " que corresponde a la edad de la persona.");
            $(objeto).val("");
        }
    }


    function validarTotalCuartos(totalcuartosxfamilia, objeto) {

        var totalcuartos = parseInt($(objeto).val());
        if (totalcuartos > totalcuartosxfamilia) {
            alert("El valor registrado no debe ser mayor a " + totalcuartosxfamilia + " que corresponde a al total de cuartos por familia.");
            $(objeto).val("");
        }
    }

    function validarAñosEstadia(edad, objeto) {
        var anios = parseInt($(objeto).val());
        if (anios > edad) {
            alert("El valor registrado no debe ser mayor a " + edad + " que corresponde a la edad de la persona.");
            $(objeto).val("");
        }
    }

    function validarMiembrosHogar(miembros, objeto) {
        if ($(objeto).val() > miembros) {
            alert("El valor registrado debe ser mayor o igual a " + miembros + " que corresponde al número de miembros del hogar registrados.");
            $(objeto).val("");
        }
    }

    function confirmacionCambioCedula(cedula, objeto) {
        if ($(objeto).val() != cedula) {
            alert("La cedula que viene del registro es " + cedula + " Desea modificarla? recuerde que cambiara la cedula del registro original ");

        }
    }

    function confirmacionFechaNacimiento(fechanacimiento, objeto) {
        if ($(objeto).val() != fechanacimiento) {
            alert("La cedula que viene del registro es " + cedula + " Desea modificarla? recuerde que cambiara la cedula del registro original ");

        }
    }

    $(".drop").change(function () {

        var id = $(this).attr('id').split('_');
        fillComboMunicipios("M_" + id[1], $(this).val());
    });

    function fillComboMunicipios(updateId, value) {
        $.getJSON("@Url.Action("MunicipiosPorDepartamento")" + "/" + value,
                  function (data) {
                      $("#" + updateId).empty();
                      $.each(data, function (i, item) {
                          $("#" + updateId).append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                      });

                      $("#" + updateId).prop("disabled", false);
                  });
    }
    
    $(".guardaultimodatoseleccionado").change(function () {
        
        var id = $(this).attr('id').split('_');
        guardaUltimodatoseleccionado($(this).val());

    });

    function guardaUltimodatoseleccionado( value) {
        $.getJSON("@Url.Action("guardadoUltimoValor")" + "/" + value,
                  function (data) {                      
                      console.log("Guardado exitoso de valor: "+value)
                  });

    }

    
    $(".dropdepartamento").change(function () {
        
        var id = $(this).attr('id').split('_');
        fillDepartamento("DE_" + id[1], $(this).val());

    });

    function fillDepartamento(updateId, value) {
        $.getJSON("@Url.Action("dtsDepartamentoPorDT")" + "/" + value,
                  function (data) {
                      $("#" + updateId).empty();
                      $.each(data, function (i, item) {
                          $("#" + updateId).append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                      });

                      $("#" + updateId).prop("disabled", false);
                  });

    }

    $(".droppuntoatencion").change(function () {
        var id = $(this).attr('id').split('_');
        fillPuntoAtencion("PA_" + id[1], $(this).val());
    });

    function fillPuntoAtencion(updateId, value) {
        $.getJSON("@Url.Action("puntoatencionpordt")" + "/" + value,
                  function (data) {
                      $("#" + updateId).empty();
                      $.each(data, function (i, item) {
                          $("#" + updateId).append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                      });

                      $("#" + updateId).prop("disabled", false);
                  });

    }


    $(".dropmunicipio").change(function () {

        var id = $(this).attr('id').split('_');
        fillMunicipio("MU_" + id[1], $(this).val());
    });

    function fillMunicipio(updateId, value) {
        $.getJSON("@Url.Action("municipioporpuntoatencion")" + "/" + value,
                  function (data) {
                      $("#" + updateId).empty();
                      $.each(data, function (i, item) {
                          $("#" + updateId).append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                      });

                      $("#" + updateId).prop("disabled", false);
                  });

    }


    var idPregunta = $('#idPregunt').val();
    $(function () {

        $(".autocompletar").autocomplete({
            source: '@Url.Action("AutoCompletarTexto", "Encuesta")',
            minLength: 3,
        });
    });

</script>
